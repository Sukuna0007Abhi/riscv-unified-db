# Copyright (c) Qualcomm Technologies, Inc. and/or its subsidiaries.

# WARNING: This file is auto-generated from spec/std/isa/inst/Zaamo/amoxorN.layout# SPDX-License-Identifier: BSD-3-Clause-Clear

# yaml-language-server: $schema=../../../../schemas/inst_schema.json

$schema: "inst_schema.json#"
kind: instruction
name: amoxor.d
long_name: Atomic fetch-and-xor doubleword
description: |
  Atomically:

    * Load the doubleword at address _xs1_
    * Write the loaded value into _xd_
    * XOR the value of register _xs2_ to the loaded value
    * Write the result to the address in _xs1_
definedBy: Zaamo
base: 64
assembly: xd, xs2, (xs1)
encoding:
  match: 00100------------011-----0101111
  variables:
    - name: aq
      location: 26
    - name: rl
      location: 25
    - name: xs2
      location: 24-20
    - name: xs1
      location: 19-15
    - name: xd
      location: 11-7
access:
  s: always
  u: always
  vs: always
  vu: always
operation(): |
  if (implemented?(ExtensionName::A) && (CSR[misa].A == 1'b0)) {
    raise (ExceptionCode::IllegalInstruction, mode(), $encoding);
  }

  XReg virtual_address = X[xs1];
  X[xd] = amo<64>(virtual_address, X[xs2], AmoOperation::Xor, aq, rl, $encoding);

# ...existing sail() implementation...
