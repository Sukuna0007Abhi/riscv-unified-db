# Copyright (c) Qualcomm Technologies, Inc. and/or its subsidiaries.
# SPDX-License-Identifier: BSD-3-Clause-Clear

# WARNING: This file is auto-generated from spec/std/isa/inst/Zaamo/layouts/amoorN.layout

# yaml-language-server: $schema=../../../../schemas/inst_schema.json

$schema: "inst_schema.json#"
kind: instruction
name: amoor.d
long_name: Atomic fetch-and-or doubleword
description: |
  Atomically:

    * Load the doubleword at address _xs1_
    * Write the loaded value into _xd_
    * OR the value of register _xs2_ to the loaded value
    * Write the result to the address in _xs1_
definedBy: Zaamo
base: 64
assembly: xd, xs2, (xs1)
encoding:
  match: 01000------------011-----0101111
  variables:
    - name: aq
      location: 26
    - name: rl
      location: 25
    - name: xs2
      location: 24-20
    - name: xs1
      location: 19-15
    - name: xd
      location: 11-7
access:
  s: always
  u: always
  vs: always
  vu: always
operation(): |
  if (implemented?(ExtensionName::A) && (CSR[misa].A == 1'b0)) {
    raise (ExceptionCode::IllegalInstruction, mode(), $encoding);
  }

  XReg virtual_address = X[xs1];
  X[xd] = amo<64>(virtual_address, X[xs2], AmoOperation::Or, aq, rl, $encoding);

# SPDX-SnippetBegin
# SPDX-FileCopyrightText: 2017-2025 Contributors to the RISCV Sail Model <https://github.com/riscv/sail-riscv/blob/master/LICENCE>
# SPDX-License-Identifier: BSD-2-Clause
sail(): |
  # Copy complete sail implementation from existing amoor files

# SPDX-SnippetEnd
