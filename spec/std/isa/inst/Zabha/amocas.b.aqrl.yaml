# Copyright (c) Qualcomm Technologies, Inc. and/or its subsidiaries.
# SPDX-License-Identifier: BSD-3-Clause-Clear

# yaml-language-server: $schema=../../../../schemas/inst_schema.json

$schema: "inst_schema.json#"
kind: instruction
name: amocas.b.aqrl
long_name: Atomic compare-and-swap byte (acquire-release)
description: |
  Atomically with acquire and release ordering:

    * Load the byte at address _xs1_
    * Write the loaded value into _xd_
    * Compare the loaded value with the value in register _xs2_
    * If equal, write the value in register _xs2+1_ to the address in _xs1_
definedBy: Zabha
assembly: xd, xs2, (xs1)
encoding:
  match: 0010111----------000-----0101111
  variables:
    - name: xs2
      location: 24-20
    - name: xs1
      location: 19-15
    - name: xd
      location: 11-7
access:
  s: always
  u: always
  vs: always
  vu: always
data_independent_timing: false
operation(): |
  if (!implemented?(ExtensionName::Zabha)) {
    raise (ExceptionCode::IllegalInstruction, mode(), $encoding);
  }

  memory_model_acquire();

  XReg virtual_address = X[xs1];
  X[xd] = amocas<8>(virtual_address, X[xs2][7:0], X[xd][7:0], 1'b1, 1'b1, $encoding);

  memory_model_release();

# SPDX-SnippetBegin
# SPDX-FileCopyrightText: 2017-2025 Contributors to the RISCV Sail Model <https://github.com/riscv/sail-riscv/blob/master/LICENCE>
# SPDX-License-Identifier: BSD-2-Clause
sail(): |
  {
    if extension("Zabha") then {
      /* Get the address, X(rs1) (no offset).
       * Some extensions perform additional checks on address validity.
       */
      match ext_data_get_addr(rs1, zeros(), ReadWrite(Data, Data), BYTE) {
        Ext_DataAddr_Error(e)  => { ext_handle_data_check_error(e); RETIRE_FAIL },
        Ext_DataAddr_OK(vaddr) => {
          match translateAddr(vaddr, ReadWrite(Data, Data)) {
            TR_Failure(e, _) => { handle_mem_exception(vaddr, e); RETIRE_FAIL },
            TR_Address(addr, _) => {
              let eares : MemoryOpResult(unit) = match (BYTE, sizeof(xlen)) {
                (BYTE, _)    => mem_write_ea(addr, 1, true & true, true, true),
                _            => internal_error(__FILE__, __LINE__, "Unexpected AMOCAS width")
              };
              let rs2_val : xlenbits = match BYTE {
                BYTE   => sign_extend(X(rs2)[7..0])
              };
              let rd_val : xlenbits = match BYTE {
                BYTE   => sign_extend(X(rd)[7..0])
              };
              match (eares) {
                MemException(e) => { handle_mem_exception(vaddr, e); RETIRE_FAIL },
                MemValue(_) => {
                  let mval : MemoryOpResult(xlenbits) = match (BYTE, sizeof(xlen)) {
                    (BYTE, _)    => extend_value(false, mem_read(ReadWrite(Data, Data), addr, 1, true, true & true, true)),
                    _            => internal_error(__FILE__, __LINE__, "Unexpected AMOCAS width")
                  };
                  match (mval) {
                    MemException(e)  => { handle_mem_exception(vaddr, e); RETIRE_FAIL },
                    MemValue(loaded) => {
                      let success : bool = (loaded == rs2_val);
                      let result : xlenbits = if success then rd_val else loaded;
                      let rval : xlenbits = match BYTE {
                        BYTE   => sign_extend(loaded[7..0])
                      };
                      let wval : MemoryOpResult(bool) = if success then {
                        match (BYTE, sizeof(xlen)) {
                          (BYTE, _)    => mem_write_value(addr, 1, result[7..0], true & true, true, true),
                          _            => internal_error(__FILE__, __LINE__, "Unexpected AMOCAS width")
                        }
                      } else {
                        MemValue(true)  /* No write on compare failure */
                      };
                      match (wval) {
                        MemValue(true)  => { X(rd) = rval; RETIRE_SUCCESS },
                        MemValue(false) => { internal_error(__FILE__, __LINE__, "AMOCAS got false from mem_write_value") },
                        MemException(e) => { handle_mem_exception(vaddr, e); RETIRE_FAIL }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
    } else {
      handle_illegal();
      RETIRE_FAIL
    }
  }

# SPDX-SnippetEnd
